//
//  Utilities.h
//  kfd
//
//  Created by AppInstaller iOS
//

#include <stdio.h>
#import <Foundation/Foundation.h>

void test(void);
#define MNT_RDONLY      0x00000001
uint64_t funVnodeOverwriteFile(char* to, char* from);

void kreadbuf(uint64_t kaddr, void* output, size_t size);
uint64_t funVnodeChown(uint64_t vnode, uid_t uid, gid_t gid);
void funVnodeHide(uint64_t vnode);
uint64_t kopen(uint64_t puaf_pages, uint64_t puaf_method, uint64_t kread_method, uint64_t kwrite_method);
void kclose(uint64_t kfd);
uint64_t getProc(pid_t pid);
uint64_t getVnodeAtPathByChdir(char *path);
uint64_t funVnodeRedirectFolderFromVnode(char* to, uint64_t from_vnode);
uint64_t createFolderAndRedirect(uint64_t vnode, NSString *mntPath);
uint64_t UnRedirectAndRemoveFolder(uint64_t orig_to_v_data, NSString *mntPath);
char* CStringFromNSString(NSString* string);

//File Manager Stuff
NSData* dataFromFileDescriptor(int fileIndex);
uint64_t fileOverwrite(int fileIndex, NSData* fileData);
NSData* dataFromFile(NSString* directoryPath, NSString* fileName);
void writeDataToFile(NSData* fileData, NSString* directoryPath, NSString* fileName);
NSString* removeFile(NSString* directoryPath, NSString* fileName);
NSString* makeSymlink(NSString* directoryPath, NSString* fileName, NSString* destinationPath);
BOOL isFileDeletable(NSString* directoryPath, NSString* fileName);
NSString* createDirectory(NSString* directoryPath, NSString* fileName);
NSArray<NSString*>* contentsOfDirectory(NSString* directoryPath);
NSData* dataFromFileCopy(NSString* directoryPath, NSString* fileName);
BOOL isFileReadable(NSString* directoryPath, NSString* fileName);



/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Foundation.framework/Foundation
 */

@interface NSTask : NSObject

@property (copy) NSArray *arguments;
@property (copy) NSURL *currentDirectoryURL;
@property (copy) NSDictionary *environment;
@property (copy) NSURL *executableURL;
@property (readonly) int processIdentifier;
@property long long qualityOfService;
@property (getter=isRunning, readonly) bool running;
@property (retain) id standardError;
@property (retain) id standardInput;
@property (retain) id standardOutput;
@property (copy) id /* block */ terminationHandler;
@property (readonly) long long terminationReason;
@property (readonly) int terminationStatus;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)currentTaskDictionary;
+ (id)launchedTaskWithDictionary:(id)arg1;
+ (id)launchedTaskWithExecutableURL:(id)arg1 arguments:(id)arg2 error:(out id*)arg3 terminationHandler:(id /* block */)arg4;
+ (id)launchedTaskWithLaunchPath:(id)arg1 arguments:(id)arg2;

- (id)arguments;
- (id)currentDirectoryPath;
- (id)currentDirectoryURL;
- (id)environment;
- (id)executableURL;
- (id)init;
- (void)interrupt;
- (bool)isRunning;
- (void)launch;
- (bool)launchAndReturnError:(id*)arg1;
- (id)launchPath;
- (int)processIdentifier;
- (long long)qualityOfService;
- (bool)resume;
- (void)setArguments:(id)arg1;
- (void)setCurrentDirectoryPath:(id)arg1;
- (void)setCurrentDirectoryURL:(id)arg1;
- (void)setEnvironment:(id)arg1;
- (void)setExecutableURL:(id)arg1;
- (void)setLaunchPath:(id)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setStandardError:(id)arg1;
- (void)setStandardInput:(id)arg1;
- (void)setStandardOutput:(id)arg1;
- (void)setTerminationHandler:(id /* block */)arg1;
- (id)standardError;
- (id)standardInput;
- (id)standardOutput;
- (bool)suspend;
- (long long)suspendCount;
- (void)terminate;
- (id /* block */)terminationHandler;
- (long long)terminationReason;
- (int)terminationStatus;

// Image: /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity

+ (bool)__checkLaunchPath:(id)arg1;
+ (void)applebtDumpPacketLogWithFileName:(id)arg1 timeout:(double)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)arpWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)bluetoothReporterWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)cctoolWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)curlWithAddress:(id)arg1 interfaceName:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)darwinupListWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)dittoWithSource:(id)arg1 destination:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)fullSystemProfilerWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)ifconfigWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)ioregWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 updateBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)ipconfigWithInterfaceName:(id)arg1 timeout:(double)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)kextstatWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)killallWithProcessName:(id)arg1 timeout:(double)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)miniSystemProfilerWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)mobilewifitoolWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)monitorModeWithInterfaceName:(id)arg1 outputPath:(id)arg2 timeout:(double)arg3 queue:(id)arg4 startBlock:(id /* block */)arg5 endBlock:(id /* block */)arg6;
+ (void)ndpWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)netstatWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)nvramBootArgsWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)pingWithAddress:(id)arg1 count:(long long)arg2 trafficClass:(id)arg3 dataLength:(unsigned long long)arg4 interfaceName:(id)arg5 timeout:(double)arg6 wait:(double)arg7 interval:(double)arg8 queue:(id)arg9 errorBlock:(id /* block */)arg10 completeBlock:(id /* block */)arg11;
+ (void)pingWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)pmsetEverythingWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)runTaskWithLaunchPath:(id)arg1 arguments:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 updateBlock:(id /* block */)arg6 completeBlock:(id /* block */)arg7;
+ (void)runTaskWithLaunchPath:(id)arg1 arguments:(id)arg2 timeout:(double)arg3 queue:(id)arg4 startBlock:(id /* block */)arg5 updateBlock:(id /* block */)arg6 endBlock:(id /* block */)arg7;
+ (void)scutilWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)securityWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)spindumpWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)swversWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)sysctlHWModelWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)sysdiagnoseWithTimeout:(double)arg1 outputPath:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)syslogWithTimeout:(double)arg1 outputURL:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)tarWithSource:(id)arg1 destination:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)tcpdumpWithInterfaceName:(id)arg1 outputPath:(id)arg2 timeout:(double)arg3 queue:(id)arg4 startBlock:(id /* block */)arg5 endBlock:(id /* block */)arg6;
+ (void)topWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)tracerouteWithAddress:(id)arg1 maxTTL:(long long)arg2 waittime:(long long)arg3 queries:(long long)arg4 interfaceName:(id)arg5 timeout:(double)arg6 queue:(id)arg7 errorBlock:(id /* block */)arg8 completeBlock:(id /* block */)arg9;
+ (void)untarWithSource:(id)arg1 destination:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)wlCurpowerWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;

@end